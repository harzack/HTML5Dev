<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META NAME="bookrevnum" CONTENT="LLESWEBR100500-H-UGD-FR-1">
<META name="pvScheme" content="010203-yymm">
<META name="verttl" content="10.5.0">
<META name="PiXprocLocator" content="webreports">
<META mancondkey="lleswebr-igd -- lleswebr-h-agd"><title>Cas 2 - Fonctionnement d'un filtre de comptage dynamique pendant la saisie de l'utilisateur</title>
<META NAME="GENERATOR" CONTENT="Modular DocBook HTML Stylesheet Version 1.44">
<META NAME="SECTLVL" CONTENT="3">
<LINK REL="STYLESHEET" TYPE="text/css" HREF="../../ix21.css">

<script language="JavaScript" src="../../llhelp.js"></script>
</HEAD>
<body ONLOAD="checkFrame( 'wr-araxproc2-ex.htm' )" CLASS="Body" TEXT="#000000" BGCOLOR="#FFFFFF" link="#003366" alink="#3300FF" vlink="#660033" background="../../images/pattern.gif">

<DIV ID="HL4SRCH">
<DIV CLASS="pagecontent" ID="PAGECONTENT">
<!-- header -->
  <script language="JavaScript">
          var header = new AdminHeader("../../images/");
          header.title1 = 'Exemples AJAX';
          header.title2 = 'Cas 2 - Fonctionnement d\'un filtre de comptage dynamique pendant la saisie de l\'utilisateur';
           header.draw();
  </script>

<P class="nr1"><A NAME="TMPID18409"></A>Cet exemple présente un champ de filtre qui, au fur et à mesure que l'utilisateur tape, sera utilisé pour mettre à jour automatiquement un élément HTML montrant combien de résultats on peut espérer une fois la requête exécutée. Ce type de fonctionnalité est particulièrement utile lorsque l'on doit traiter d'important ensemble de résultats, car l'utilisateur sait ainsi combien de résultats il va obtenir avant d'exécuter la requête. Cela peut également permettre de gagner beaucoup de temps dans les domaines où la latence réseau influence les performances. </P>
<P><A NAME="TMPID18410"></A>Tout d'abord, créez un rapport LiveReport très simple (LiveReport Extensions doit être installé) qui compte le nombre de correspondances pour une chaîne donnée. Par exemple : <TT CLASS="literal">select count(*) hits from dtree where name like '%1%'</TT> </P>
<P><A NAME="TMPID18412"></A>Définissez le paramètre, %1, sur le type insertString. Le rapport LiveReport doit s'afficher pour l'entrée de l'utilisateur et compter tous les éléments qui commencent par les lettres fournies. </P>
<P><A NAME="TMPID18413"></A>Ajoutez ensuite le nouveau WebReport qui utilise le rapport LiveReport ci-dessus comme source de données. Modifiez ce WebReport et créez un schéma XML très simple de sorte à obtenir quelque chose qui ressemble à : </P><A NAME="AEN17654"></A>
<PRE 
CLASS="screen"
>&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
[LL_WEBREPORT_STARTROW /]
&lt;[LL_REPTAG_COLNAME1 /]&gt;[LL_REPTAG=HITS /]&lt;/[LL_REPTAG_COLNAME1 /]&gt;
[LL_WEBREPORT_ENDROW /]</PRE
>
<P><A NAME="TMPID18415"></A>Définissez le type mime de destination comme text/xml, afin que nous puissions utiliser la réponse XML. Maintenant, exécutez le rapport et vérifiez qu'Internet Explorer affiche la page au format XML sans erreurs. </P>
<P><A NAME="TMPID18416"></A>A ce stade, nous avons terminé le WebReport qui va renvoyer les informations de comptage. Nous devons désormais l'appeler à partir de l'endroit où l'utilisateur va exécuter sa requête. </P>
<P><A NAME="TMPID18417"></A>Créez un second rapport LiveReport qui renvoie une liste d'éléments Dtree basée sur la première partie de leur nom. Tout comme le premier rapport LiveReport, il nécessite un type de paramètre <TT CLASS="literal">insertString</TT>. Par exemple : <TT CLASS="literal">select * from dtree where name like '%1%'</TT> </P>
<P><A NAME="TMPID18420"></A>Vous remarquerez que cette requête est très proche de la précédente ; la seule différence est que nous récupérons l'ensemble de données plutôt qu'un compte. </P>
<P><A NAME="TMPID18421"></A>Finalement, créez un second WebReport et utilisez le nouveau rapport LiveReport comme source de données. Modifiez l'affichage de rapport de façon à obtenir ce qui suit : </P><A NAME="AEN17662"></A>
<PRE 
CLASS="screen"
>&lt;SCRIPT&gt;
function updateHits( myFilter ) {

	var url = '[LL_REPTAG_$AJAXWR LLURL:REPORT /]&amp;inputLabel1=' + myFilter + '&amp;prompting=done';
	if (window.ActiveXObject) {
		http_request = new ActiveXObject( "Msxml2.XMLHTTP" );
	}
	http_request.onreadystatechange = function() { displayHits(); };
	http_request.open( 'GET', url, true );
	http_request.send( null );
}

function displayHits( ) {
	if (http_request.readyState == 4) {
		document.getElementById("hitsText").innerHTML = "Matches: " + http_request.responseXML.childNodes[1].text;
	}
}
&lt;/SCRIPT&gt;

[LL_REPTAG_MYID NODEINFO:NAME /]
[LL_REPTAG_MYID LLURL:FUNCTIONMENU /]
[LL_REPTAG_MYID LLURL:UPALEVEL /]
&lt;BR&gt;

&lt;INPUT TYPE=TEXT ID="MYFILTER" ONKEYUP="updateHits(this.value);"&gt;
&lt;INPUT TYPE=BUTTON VALUE="Run" ONCLICK="document.location='[LL_REPTAG_MYID LLURL:REPORT /]&amp;inputLabel1=' + document.getElementById('MYFILTER').value"&gt;

&lt;DIV ID="hitsText"&gt;Updates when you type&lt;/DIV&gt;
&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME1 /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;/TR&gt;

[LL_WEBREPORT_STARTROW /]

&lt;TR&gt;
&lt;TD&gt; [LL_REPTAG_1 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_2 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_3 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_4 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_5 /]&lt;/TD&gt;
&lt;/TR&gt;

[LL_WEBREPORT_ENDROW /]

&lt;/TABLE&gt;</PRE
>
<P><A NAME="TMPID18423"></A>L'interaction entre les deux WebReports est représentée dans le diagramme ci-dessous. </P>
<P><IMG SRC="image039.png"></P>
<table CLASS="note">
<TR>
<TD FRAME="VOID" CLASS="tabverspace" COLSPAN="2">&nbsp;</TD></TR>
<TR FRAME="VOID">
<TD ALIGN="LEFT" VALIGN="TOP" CLASS="iconcell">
<P CLASS="note"><A NAME="TMP4REF61"></A><IMG ALT="Note" SRC="../../images/pi_note.gif"></IMG></P></TD>
<TD ALIGN="LEFT" CLASS="percontscell">
<P CLASS="note" ALIGN="LEFT"><B>Notes : </B></P><A NAME="AEN17666"></A>
<UL class="note">
<LI class="vlli">
<P class="nr1"><A NAME="AEN17667"></A><A NAME="TMPID18428"></A>Ce rapport utilise une constante, AJAXWR, vous devez définir dans l'onglet <B CLASS="guilabel">Constantes</B> en réglant le type d'objet sur Content Server et en recherchant le rapport Ajax créé ci-dessus.</P></LI>
<LI class="vlli">
<P class="nr1"><A NAME="AEN17671"></A><A NAME="TMPID18432"></A>Le second WebReport attend également un paramètre qui, sauf indication contraire de la part du développeur du rapport, génère une invite à l'exécution du rapport. Le développeur peut saisir le nom du paramètre, ici <TT CLASS="literal">inputLabel1</TT>, avec une valeur par défaut vide et un champ d'invite défini sur non. Cela a pour effet de rétablir tous les résultats d'origine. D'autres valeurs peuvent bien sûr être utilisées. </P></LI></UL></TD></TR>
<TR>
<TD FRAME="VOID" CLASS="tabverspace" COLSPAN="2">&nbsp;</TD></TR></table>
<P><A NAME="TMPID18434"></A>Le code ci-dessus a été simplifié au maximum afin de démontrer les principes et techniques. Il ne tient pas compte des chemins d'erreur, des navigateurs autres que Microsoft Internet Explorer ni des autorisations de Content Server. Ces éléments peuvent être facilement ajoutés par le développeur. </P>
<P ALIGN="RIGHT"></P></DIV></DIV>

  <script language="JavaScript">
       new AdminFooter("../../images/").draw();
  </script>
</body></HTML>