<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META NAME="bookrevnum" CONTENT="LLESWEBR100500-1409-H-UGD-EN-01">
<META name="pvScheme" content="010203-yymm">
<META name="verttl" content="10.5.0 Update 2014-09">
<META name="PiXprocLocator" content="webreports">
<META mancondkey="lleswebr-igd -- lleswebr-h-agd"><title>Case 2 - Dynamically counting filter hits as the user types</title>
<META NAME="GENERATOR" CONTENT="Modular DocBook HTML Stylesheet Version 1.44">
<META NAME="SECTLVL" CONTENT="3">
<LINK REL="STYLESHEET" TYPE="text/css" HREF="../../ix21.css">

<script language="JavaScript" src="../../llhelp.js"></script>
</HEAD>
<body ONLOAD="checkFrame( 'wr-araxproc2-ex.htm' )" CLASS="Body" TEXT="#000000" BGCOLOR="#FFFFFF" link="#003366" alink="#3300FF" vlink="#660033" background="../../images/pattern.gif">

<DIV ID="HL4SRCH">
<DIV CLASS="pagecontent" ID="PAGECONTENT">
<!-- header -->
  <script language="JavaScript">
          var header = new AdminHeader("../../images/");
          header.title1 = 'AJAX Examples';
          header.title2 = 'Case 2 - Dynamically counting filter hits as the user types';
           header.draw();
  </script>

<P class="nr1"><A NAME="TMPID23205"></A>This example demonstrates a filter field that, as the user types, will be used to automatically update a HTML element showing how many results to expect when the query runs. This type of functionality is particularly useful when dealing with large result sets as the user knows how many results to expect before issuing the query. It can also be a great time saver where network latency is impacting performance.</P>
<P><A NAME="TMPID23206"></A>First, create a very simple LiveReport, LiveReport Extensions must be installed, which counts the number of matches for a given string. Something like: <TT CLASS="literal">select count(*) hits from dtree where name like '%1%'</TT></P>
<P><A NAME="TMPID23208"></A>Define the parameter, %1, as type insertString. The LiveReport should prompt for user input and count all items that start with the letters provided.</P>
<P><A NAME="TMPID23209"></A>Next add a new WebReport that uses the above LiveReport as its data source. Edit this WebReport and create a very simple XML schema so that you have something that looks like:</P><A NAME="AEN21887"></A>
<PRE 
CLASS="screen"
>&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
[LL_WEBREPORT_STARTROW /]
&lt;[LL_REPTAG_COLNAME1 /]&gt;[LL_REPTAG=HITS /]&lt;/[LL_REPTAG_COLNAME1 /]&gt;
[LL_WEBREPORT_ENDROW /]</PRE
>
<P><A NAME="TMPID23211"></A>Set the destination mime type to text/xml so that we can make use of the XML response. Now run the report and verify that IE displays the page as XML with no errors.</P>
<P><A NAME="TMPID23212"></A>At this point we have finished the WebReport that will return the count information, now we need to call this from where the user will run their query.</P>
<P><A NAME="TMPID23213"></A>Create a second LiveReport that returns a list of dtree items based on the first part of their name. Like the first LiveReport, this requires an <TT CLASS="literal">insertString</TT> parameter type. As an example: <TT CLASS="literal">select * from dtree where name like '%1%'</TT></P>
<P><A NAME="TMPID23216"></A>You will note that this is very similar to the previous query; the only difference being that we're bringing back the data set rather than a count.</P>
<P><A NAME="TMPID23217"></A>Finally, create a second WebReport and use the new LiveReport as the data source. Edit the reportview so that you have something like this:</P><A NAME="AEN21895"></A>
<PRE 
CLASS="screen"
>&lt;SCRIPT&gt;
function updateHits( myFilter ) {

	var url = '[LL_REPTAG_$AJAXWR LLURL:REPORT /]&amp;inputLabel1=' + myFilter + '&amp;prompting=done';
	if (window.ActiveXObject) {
		http_request = new ActiveXObject( "Msxml2.XMLHTTP" );
	}
	http_request.onreadystatechange = function() { displayHits(); };
	http_request.open( 'GET', url, true );
	http_request.send( null );
}

function displayHits( ) {
	if (http_request.readyState == 4) {
		document.getElementById("hitsText").innerHTML = "Matches: " + http_request.responseXML.childNodes[1].text;
	}
}
&lt;/SCRIPT&gt;

[LL_REPTAG_MYID NODEINFO:NAME /]
[LL_REPTAG_MYID LLURL:FUNCTIONMENU /]
[LL_REPTAG_MYID LLURL:UPALEVEL /]
&lt;BR&gt;

&lt;INPUT TYPE=TEXT ID="MYFILTER" ONKEYUP="updateHits(this.value);"&gt;
&lt;INPUT TYPE=BUTTON VALUE="Run" ONCLICK="document.location='[LL_REPTAG_MYID LLURL:REPORT /]&amp;inputLabel1=' + document.getElementById('MYFILTER').value"&gt;

&lt;DIV ID="hitsText"&gt;Updates when you type&lt;/DIV&gt;
&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME1 /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;TD&gt;[LL_REPTAG_COLNAME++ /]&lt;/TD&gt;
&lt;/TR&gt;

[LL_WEBREPORT_STARTROW /]

&lt;TR&gt;
&lt;TD&gt; [LL_REPTAG_1 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_2 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_3 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_4 /]&lt;/TD&gt;
&lt;TD&gt; [LL_REPTAG_5 /]&lt;/TD&gt;
&lt;/TR&gt;

[LL_WEBREPORT_ENDROW /]

&lt;/TABLE&gt;</PRE
>
<P><A NAME="TMPID23219"></A>The interaction between the two WebReports is shown diagrammatically below.</P>
<P><IMG SRC="image039.png"></P>
<table CLASS="note">
<TR>
<TD FRAME="VOID" CLASS="tabverspace" COLSPAN="2">&nbsp;</TD></TR>
<TR FRAME="VOID">
<TD ALIGN="LEFT" VALIGN="TOP" CLASS="iconcell">
<P CLASS="note"><A NAME="TMP4REF83"></A><IMG ALT="Note" SRC="../../images/pi_note.gif"></IMG></P></TD>
<TD ALIGN="LEFT" CLASS="percontscell">
<P CLASS="note" ALIGN="LEFT"><B>Notes: </B></P><A NAME="AEN21899"></A>
<UL class="note">
<LI class="vlli">
<P class="nr1"><A NAME="AEN21900"></A><A NAME="TMPID23224"></A>This report uses a constant, AJAXWR, which needs to be defined on the <B CLASS="guilabel">Constants</B> tab by setting the object type to Content Server and browsing for the Ajax report created above.</P></LI>
<LI class="vlli">
<P class="nr1"><A NAME="AEN21904"></A><A NAME="TMPID23228"></A>This second WebReport also expects a parameter which, unless the report developer states otherwise, will cause a prompt when the report runs. The developer could enter the parameter name, <TT CLASS="literal">inputLabel1</TT> in this case, along with an empty default value and the prompt field set to no. This will have the effect of causing all the results to be returned initially. Obviously other values could be used.</P></LI></UL></TD></TR>
<TR>
<TD FRAME="VOID" CLASS="tabverspace" COLSPAN="2">&nbsp;</TD></TR></table>
<P><A NAME="TMPID23230"></A>The code above has been cut down to a minimum to demonstrate principles and techniques. It takes no account of error paths, browsers other than Microsoft Internet Explorer, or Content Server permissions. These things can all be easily added by the developer.</P>
<P ALIGN="RIGHT"></P></DIV></DIV>

  <script language="JavaScript">
       new AdminFooter("../../images/").draw();
  </script>
</body></HTML>